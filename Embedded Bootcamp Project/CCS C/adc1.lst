CCS PCM C Compiler, Version 4.084, 36728               23-Kas-22 21:54

               Filename: C:\Users\luty1\OneDrive\Belgeler\Embedded Bootcamp Project\CCS C\adc1.lst

               ROM used: 1278 words (16%)
                         Largest free fragment is 2048
               RAM used: 24 (7%) at main() level
                         50 (14%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   3D4
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.6
001C:  GOTO   01F
001D:  BTFSC  0C.6
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   0CA
.................... #include <16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
....................  
.................... #device adc=10 
.................... #fuses XT,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG,NOCPD 
.................... #use delay(clock=4000000) 
*
00FA:  MOVLW  40
00FB:  MOVWF  04
00FC:  BCF    03.7
00FD:  MOVF   00,W
00FE:  BTFSC  03.2
00FF:  GOTO   10E
0100:  MOVLW  01
0101:  MOVWF  78
0102:  CLRF   77
0103:  DECFSZ 77,F
0104:  GOTO   103
0105:  DECFSZ 78,F
0106:  GOTO   102
0107:  MOVLW  4A
0108:  MOVWF  77
0109:  DECFSZ 77,F
010A:  GOTO   109
010B:  GOTO   10C
010C:  DECFSZ 00,F
010D:  GOTO   100
010E:  RETLW  00
....................  
.................... #define use_portb_lcd TRUE // 
.................... #include <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
011C:  MOVLW  F0
011D:  BSF    03.5
011E:  MOVWF  06
....................       lcd.rw = 1; 
011F:  BCF    03.5
0120:  BSF    06.2
....................       delay_cycles(1); 
0121:  NOP
....................       lcd.enable = 1; 
0122:  BSF    06.0
....................       delay_cycles(1); 
0123:  NOP
....................       high = lcd.data; 
0124:  MOVF   06,W
0125:  SWAPF  06,W
0126:  ANDLW  0F
0127:  MOVWF  47
....................       lcd.enable = 0; 
0128:  BCF    06.0
....................       delay_cycles(1); 
0129:  NOP
....................       lcd.enable = 1; 
012A:  BSF    06.0
....................       delay_us(1); 
012B:  NOP
....................       low = lcd.data; 
012C:  MOVF   06,W
012D:  SWAPF  06,W
012E:  ANDLW  0F
012F:  MOVWF  46
....................       lcd.enable = 0; 
0130:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
0131:  MOVLW  00
0132:  BSF    03.5
0133:  MOVWF  06
....................       return( (high<<4) | low); 
0134:  BCF    03.5
0135:  SWAPF  47,W
0136:  MOVWF  77
0137:  MOVLW  F0
0138:  ANDWF  77,F
0139:  MOVF   77,W
013A:  IORWF  46,W
013B:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
010F:  SWAPF  47,W
0110:  ANDLW  F0
0111:  MOVWF  77
0112:  MOVLW  0F
0113:  ANDWF  06,W
0114:  IORWF  77,W
0115:  MOVWF  06
....................       delay_cycles(1); 
0116:  NOP
....................       lcd.enable = 1; 
0117:  BSF    06.0
....................       delay_us(2); 
0118:  GOTO   119
....................       lcd.enable = 0; 
0119:  BCF    06.0
.................... } 
011A:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
011B:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
013C:  MOVF   78,W
013D:  MOVWF  46
013E:  BTFSC  46.7
013F:  GOTO   11C
....................       lcd.rs = address; 
0140:  BTFSS  44.0
0141:  BCF    06.1
0142:  BTFSC  44.0
0143:  BSF    06.1
....................       delay_cycles(1); 
0144:  NOP
....................       lcd.rw = 0; 
0145:  BCF    06.2
....................       delay_cycles(1); 
0146:  NOP
....................       lcd.enable = 0; 
0147:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0148:  SWAPF  45,W
0149:  MOVWF  46
014A:  MOVLW  0F
014B:  ANDWF  46,F
014C:  MOVF   46,W
014D:  MOVWF  47
014E:  CALL   10F
....................       lcd_send_nibble(n & 0xf); 
014F:  MOVF   45,W
0150:  ANDLW  0F
0151:  MOVWF  46
0152:  MOVWF  47
0153:  CALL   10F
.................... } 
0154:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0155:  MOVLW  00
0156:  BSF    03.5
0157:  MOVWF  06
....................     lcd.rs = 0; 
0158:  BCF    03.5
0159:  BCF    06.1
....................     lcd.rw = 0; 
015A:  BCF    06.2
....................     lcd.enable = 0; 
015B:  BCF    06.0
....................     delay_ms(15); 
015C:  MOVLW  0F
015D:  MOVWF  40
015E:  CALL   0FA
....................     for(i=1;i<=3;++i) { 
015F:  MOVLW  01
0160:  MOVWF  31
0161:  MOVF   31,W
0162:  SUBLW  03
0163:  BTFSS  03.0
0164:  GOTO   16D
....................        lcd_send_nibble(3); 
0165:  MOVLW  03
0166:  MOVWF  47
0167:  CALL   10F
....................        delay_ms(5); 
0168:  MOVLW  05
0169:  MOVWF  40
016A:  CALL   0FA
....................     } 
016B:  INCF   31,F
016C:  GOTO   161
....................     lcd_send_nibble(2); 
016D:  MOVLW  02
016E:  MOVWF  47
016F:  CALL   10F
....................     for(i=0;i<=3;++i) 
0170:  CLRF   31
0171:  MOVF   31,W
0172:  SUBLW  03
0173:  BTFSS  03.0
0174:  GOTO   17E
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0175:  MOVF   31,W
0176:  CALL   035
0177:  MOVWF  32
0178:  CLRF   44
0179:  MOVF   32,W
017A:  MOVWF  45
017B:  CALL   11B
017C:  INCF   31,F
017D:  GOTO   171
.................... } 
017E:  BCF    0A.3
017F:  BCF    0A.4
0180:  GOTO   3FE (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0198:  DECFSZ 41,W
0199:  GOTO   19B
019A:  GOTO   19E
....................      address=lcd_line_two; 
019B:  MOVLW  40
019C:  MOVWF  42
....................    else 
019D:  GOTO   19F
....................      address=0; 
019E:  CLRF   42
....................    address+=x-1; 
019F:  MOVLW  01
01A0:  SUBWF  40,W
01A1:  ADDWF  42,F
....................    lcd_send_byte(0,0x80|address); 
01A2:  MOVF   42,W
01A3:  IORLW  80
01A4:  MOVWF  43
01A5:  CLRF   44
01A6:  MOVF   43,W
01A7:  MOVWF  45
01A8:  CALL   11B
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0181:  MOVF   3F,W
0182:  XORLW  0C
0183:  BTFSC  03.2
0184:  GOTO   18C
0185:  XORLW  06
0186:  BTFSC  03.2
0187:  GOTO   194
0188:  XORLW  02
0189:  BTFSC  03.2
018A:  GOTO   1AA
018B:  GOTO   1AF
....................      case '\f'   : lcd_send_byte(0,1); 
018C:  CLRF   44
018D:  MOVLW  01
018E:  MOVWF  45
018F:  CALL   11B
....................                    delay_ms(2); 
0190:  MOVLW  02
0191:  MOVWF  40
0192:  CALL   0FA
....................                                            break; 
0193:  GOTO   1B5
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0194:  MOVLW  01
0195:  MOVWF  40
0196:  MOVLW  02
0197:  MOVWF  41
*
01A9:  GOTO   1B5
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
01AA:  CLRF   44
01AB:  MOVLW  10
01AC:  MOVWF  45
01AD:  CALL   11B
01AE:  GOTO   1B5
....................      default     : lcd_send_byte(1,c);     break; 
01AF:  MOVLW  01
01B0:  MOVWF  44
01B1:  MOVF   3F,W
01B2:  MOVWF  45
01B3:  CALL   11B
01B4:  GOTO   1B5
....................    } 
.................... } 
01B5:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #define adc_step 0.0048828125//( 5V /2^10 ) We use this macro to calculate VOLTAGE level. 
....................  
....................  
.................... int16 i; 
.................... #INT_AD 
.................... void AD_int() 
.................... {      
....................    for (i=0;i<=10000;i++)//Producing Some delay 
*
00CA:  CLRF   29
00CB:  CLRF   28
00CC:  MOVF   29,W
00CD:  SUBLW  27
00CE:  BTFSS  03.0
00CF:  GOTO   0E0
00D0:  BTFSS  03.2
00D1:  GOTO   0D6
00D2:  MOVF   28,W
00D3:  SUBLW  10
00D4:  BTFSS  03.0
00D5:  GOTO   0E0
....................    output_high(pin_c0); 
00D6:  BCF    2A.0
00D7:  MOVF   2A,W
00D8:  BSF    03.5
00D9:  MOVWF  07
00DA:  BCF    03.5
00DB:  BSF    07.0
00DC:  INCF   28,F
00DD:  BTFSC  03.2
00DE:  INCF   29,F
00DF:  GOTO   0CC
....................      
....................    for (i=0;i<=10000;i++)//Producing Some delay 
00E0:  CLRF   29
00E1:  CLRF   28
00E2:  MOVF   29,W
00E3:  SUBLW  27
00E4:  BTFSS  03.0
00E5:  GOTO   0F6
00E6:  BTFSS  03.2
00E7:  GOTO   0EC
00E8:  MOVF   28,W
00E9:  SUBLW  10
00EA:  BTFSS  03.0
00EB:  GOTO   0F6
....................    output_low(pin_c0); 
00EC:  BCF    2A.0
00ED:  MOVF   2A,W
00EE:  BSF    03.5
00EF:  MOVWF  07
00F0:  BCF    03.5
00F1:  BCF    07.0
00F2:  INCF   28,F
00F3:  BTFSC  03.2
00F4:  INCF   29,F
00F5:  GOTO   0E2
....................  
....................  
.................... } 
....................  
....................     
00F6:  BCF    0C.6
00F7:  BCF    0A.3
00F8:  BCF    0A.4
00F9:  GOTO   01F
.................... unsigned long int adcValue; 
....................  
.................... float voltage; 
....................  
.................... void main() 
.................... { 
*
03D4:  CLRF   04
03D5:  BCF    03.7
03D6:  MOVLW  1F
03D7:  ANDWF  03,F
03D8:  BSF    03.5
03D9:  BSF    1F.0
03DA:  BSF    1F.1
03DB:  BSF    1F.2
03DC:  BCF    1F.3
....................  
....................    set_tris_a(0x0F); 
*
03E0:  MOVLW  0F
03E1:  BSF    03.5
03E2:  MOVWF  05
....................    set_tris_c(0x00);    
03E3:  MOVLW  00
03E4:  MOVWF  07
03E5:  BCF    03.5
03E6:  MOVWF  2A
....................    output_c(0x00); 
03E7:  MOVWF  2A
03E8:  BSF    03.5
03E9:  CLRF   07
03EA:  BCF    03.5
03EB:  CLRF   07
....................  
....................    setup_adc_ports(AN0_AN1_AN3); 
03EC:  BSF    03.5
03ED:  BCF    1F.0
03EE:  BCF    1F.1
03EF:  BSF    1F.2
03F0:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
03F1:  BCF    03.5
03F2:  BSF    1F.6
03F3:  BSF    1F.7
03F4:  BSF    03.5
03F5:  BSF    1F.7
03F6:  BCF    03.5
03F7:  BSF    1F.0
....................    
....................    enable_interrupts(INT_AD); 
03F8:  BSF    03.5
03F9:  BSF    0C.6
....................    enable_interrupts(GLOBAL);    
03FA:  MOVLW  C0
03FB:  BCF    03.5
03FC:  IORWF  0B,F
....................     
....................     
....................    lcd_init();    
03FD:  GOTO   155
....................    printf(lcd_putc,"\f ADC APPLICATION "); 
03FE:  CLRF   31
03FF:  MOVF   31,W
0400:  CALL   03D
0401:  INCF   31,F
0402:  MOVWF  77
0403:  MOVWF  3F
0404:  CALL   181
0405:  MOVLW  12
0406:  SUBWF  31,W
0407:  BTFSS  03.2
0408:  GOTO   3FF
....................    delay_ms(500); 
0409:  MOVLW  02
040A:  MOVWF  31
040B:  MOVLW  FA
040C:  MOVWF  40
040D:  CALL   0FA
040E:  DECFSZ 31,F
040F:  GOTO   40B
....................     
....................    while(1) 
....................    { 
....................       set_adc_channel(0);      
0410:  MOVLW  00
0411:  MOVWF  78
0412:  MOVF   1F,W
0413:  ANDLW  C7
0414:  IORWF  78,W
0415:  MOVWF  1F
....................       delay_us(20);       
0416:  MOVLW  06
0417:  MOVWF  77
0418:  DECFSZ 77,F
0419:  GOTO   418
041A:  NOP
....................       adcValue = read_adc(); 
041B:  BSF    1F.2
041C:  BTFSC  1F.2
041D:  GOTO   41C
041E:  BSF    03.5
041F:  MOVF   1E,W
0420:  BCF    03.5
0421:  MOVWF  2B
0422:  MOVF   1E,W
0423:  MOVWF  2C
....................       voltage=adc_step*adcValue;  
0424:  MOVF   2C,W
0425:  MOVWF  32
0426:  MOVF   2B,W
0427:  MOVWF  31
0428:  CALL   1B6
0429:  CLRF   42
042A:  CLRF   41
042B:  MOVLW  20
042C:  MOVWF  40
042D:  MOVLW  77
042E:  MOVWF  3F
042F:  MOVF   7A,W
0430:  MOVWF  46
0431:  MOVF   79,W
0432:  MOVWF  45
0433:  MOVF   78,W
0434:  MOVWF  44
0435:  MOVF   77,W
0436:  MOVWF  43
0437:  CALL   1D3
0438:  MOVF   7A,W
0439:  MOVWF  30
043A:  MOVF   79,W
043B:  MOVWF  2F
043C:  MOVF   78,W
043D:  MOVWF  2E
043E:  MOVF   77,W
043F:  MOVWF  2D
....................        
....................       printf(lcd_putc,"\f--Channel AN0--"); 
0440:  CLRF   31
0441:  MOVF   31,W
0442:  CALL   054
0443:  INCF   31,F
0444:  MOVWF  77
0445:  MOVWF  3F
0446:  CALL   181
0447:  MOVLW  10
0448:  SUBWF  31,W
0449:  BTFSS  03.2
044A:  GOTO   441
....................       delay_ms(1500); 
044B:  MOVLW  06
044C:  MOVWF  31
044D:  MOVLW  FA
044E:  MOVWF  40
044F:  CALL   0FA
0450:  DECFSZ 31,F
0451:  GOTO   44D
....................       printf(lcd_putc,"\f Digital=%lu",adcValue); 
0452:  CLRF   31
0453:  MOVF   31,W
0454:  CALL   069
0455:  INCF   31,F
0456:  MOVWF  77
0457:  MOVWF  3F
0458:  CALL   181
0459:  MOVLW  0A
045A:  SUBWF  31,W
045B:  BTFSS  03.2
045C:  GOTO   453
045D:  MOVLW  10
045E:  MOVWF  04
045F:  MOVF   2C,W
0460:  MOVWF  33
0461:  MOVF   2B,W
0462:  MOVWF  32
0463:  CALL   248
....................       printf(lcd_putc,"\n Voltage=%0.2fV",voltage); 
0464:  CLRF   31
0465:  MOVF   31,W
0466:  CALL   07B
0467:  INCF   31,F
0468:  MOVWF  77
0469:  MOVWF  3F
046A:  CALL   181
046B:  MOVLW  0A
046C:  SUBWF  31,W
046D:  BTFSS  03.2
046E:  GOTO   465
046F:  MOVLW  C9
0470:  MOVWF  04
0471:  MOVF   30,W
0472:  MOVWF  35
0473:  MOVF   2F,W
0474:  MOVWF  34
0475:  MOVF   2E,W
0476:  MOVWF  33
0477:  MOVF   2D,W
0478:  MOVWF  32
0479:  MOVLW  02
047A:  MOVWF  36
047B:  CALL   2ED
047C:  MOVLW  56
047D:  MOVWF  3F
047E:  CALL   181
....................       delay_ms(2000); 
047F:  MOVLW  08
0480:  MOVWF  31
0481:  MOVLW  FA
0482:  MOVWF  40
0483:  CALL   0FA
0484:  DECFSZ 31,F
0485:  GOTO   481
....................        
....................        
....................       set_adc_channel(1);       
0486:  MOVLW  08
0487:  MOVWF  78
0488:  MOVF   1F,W
0489:  ANDLW  C7
048A:  IORWF  78,W
048B:  MOVWF  1F
....................       delay_us(20);      
048C:  MOVLW  06
048D:  MOVWF  77
048E:  DECFSZ 77,F
048F:  GOTO   48E
0490:  NOP
....................       adcValue=read_adc();       
0491:  BSF    1F.2
0492:  BTFSC  1F.2
0493:  GOTO   492
0494:  BSF    03.5
0495:  MOVF   1E,W
0496:  BCF    03.5
0497:  MOVWF  2B
0498:  MOVF   1E,W
0499:  MOVWF  2C
....................       voltage=adc_step*adcValue;   
049A:  MOVF   2C,W
049B:  MOVWF  32
049C:  MOVF   2B,W
049D:  MOVWF  31
049E:  CALL   1B6
049F:  CLRF   42
04A0:  CLRF   41
04A1:  MOVLW  20
04A2:  MOVWF  40
04A3:  MOVLW  77
04A4:  MOVWF  3F
04A5:  MOVF   7A,W
04A6:  MOVWF  46
04A7:  MOVF   79,W
04A8:  MOVWF  45
04A9:  MOVF   78,W
04AA:  MOVWF  44
04AB:  MOVF   77,W
04AC:  MOVWF  43
04AD:  CALL   1D3
04AE:  MOVF   7A,W
04AF:  MOVWF  30
04B0:  MOVF   79,W
04B1:  MOVWF  2F
04B2:  MOVF   78,W
04B3:  MOVWF  2E
04B4:  MOVF   77,W
04B5:  MOVWF  2D
....................        
....................       printf(lcd_putc,"\f--Channel AN1--"); 
04B6:  CLRF   31
04B7:  MOVF   31,W
04B8:  CALL   090
04B9:  INCF   31,F
04BA:  MOVWF  77
04BB:  MOVWF  3F
04BC:  CALL   181
04BD:  MOVLW  10
04BE:  SUBWF  31,W
04BF:  BTFSS  03.2
04C0:  GOTO   4B7
....................       delay_ms(1500); 
04C1:  MOVLW  06
04C2:  MOVWF  31
04C3:  MOVLW  FA
04C4:  MOVWF  40
04C5:  CALL   0FA
04C6:  DECFSZ 31,F
04C7:  GOTO   4C3
....................       printf(lcd_putc,"\fDigital=%lu",adcValue); 
04C8:  CLRF   31
04C9:  MOVF   31,W
04CA:  CALL   0A5
04CB:  INCF   31,F
04CC:  MOVWF  77
04CD:  MOVWF  3F
04CE:  CALL   181
04CF:  MOVLW  09
04D0:  SUBWF  31,W
04D1:  BTFSS  03.2
04D2:  GOTO   4C9
04D3:  MOVLW  10
04D4:  MOVWF  04
04D5:  MOVF   2C,W
04D6:  MOVWF  33
04D7:  MOVF   2B,W
04D8:  MOVWF  32
04D9:  CALL   248
....................       printf(lcd_putc,"\nVoltage=%0.2fV",voltage);      
04DA:  CLRF   31
04DB:  MOVF   31,W
04DC:  CALL   0B6
04DD:  INCF   31,F
04DE:  MOVWF  77
04DF:  MOVWF  3F
04E0:  CALL   181
04E1:  MOVLW  09
04E2:  SUBWF  31,W
04E3:  BTFSS  03.2
04E4:  GOTO   4DB
04E5:  MOVLW  C9
04E6:  MOVWF  04
04E7:  MOVF   30,W
04E8:  MOVWF  35
04E9:  MOVF   2F,W
04EA:  MOVWF  34
04EB:  MOVF   2E,W
04EC:  MOVWF  33
04ED:  MOVF   2D,W
04EE:  MOVWF  32
04EF:  MOVLW  02
04F0:  MOVWF  36
04F1:  CALL   2ED
04F2:  MOVLW  56
04F3:  MOVWF  3F
04F4:  CALL   181
....................       delay_ms(2000); 
04F5:  MOVLW  08
04F6:  MOVWF  31
04F7:  MOVLW  FA
04F8:  MOVWF  40
04F9:  CALL   0FA
04FA:  DECFSZ 31,F
04FB:  GOTO   4F7
....................   
....................    } 
04FC:  GOTO   410
....................     
.................... } 
....................  
04FD:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
